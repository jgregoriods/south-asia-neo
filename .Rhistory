install.packages("sf")
install.packages("units")
install.packages("units")
install.packages("sf")
install.packages("rnaturalearthdata")
library(raster)
a <- raster("~/euro_test.tif")
plot(a)
a
plot(a)
dev.off()
clear
clear()
cl()
gc()
plot(a)
sp0 <- SpatialPoints(cbind(30,40))
plot(sp0, add=T)
is.projected(sp0)
proj4str+
proj4string(sp0) <- CRS("+init=epsg:4326")
is.projected(sp0)
(i in sp0)
for (i in sp0) {}
sp0[1]
install.packages("gdistance")
library(gdistance)
origin <- sp0
tr <- transition(a, function(x) 1/mean(x), 8)
tr <- geoCorrection(tr)
ac <- accCost(tr, origin)
plot(ac)
plot(ac/1000)
plot(ac/1000/1.78)
plot(5000 - (ac/1000/1.78))
library(raster)
r <- raster("~/expand_tupi/layers/ele.asc")
plot(r)
dev.off()
plot(r)
sp0 <- SpatialPoints(cbind(0,4000))
plot(sp0, add=T)
r
sp0 <- SpatialPoints(cbind(0,4000000))
plot(r)
plot(sp0, add=T)
extract(r, sp0)
library(rgeos)
gb <- gBuffer(so0, width=150000)
gb <- gBuffer(sp0, width=150000)
plot(gb, add=T)
gb <- gBuffer(sp0, width=200000)
plot(gb, add=T)
plot(sp0, add=T)
dev.off()
plot(r)
sps <- spsample(r, 1000, type=random)
sps <- spsample(extent(r), 1000, type=random)
sps <- spsample(as.polygon(extent(r)), 1000, type=random)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type=random)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type="random")
plot(sps, add=T)
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, type="regular")
plot(sps, add=T)
filterPoints <- function(pts, radius, attr) {
x <- c(colnames(coordinates(pts)))[1]
y <- c(colnames(coordinates(pts)))[2]
clusters <- zerodist(pts, zero = radius, unique.ID = TRUE)
pts$clusterID <- clusters
pts.df <- as.data.frame(pts)
pts.max <- as.data.frame(pts.df %>% group_by(clusterID) %>% top_n(1, attr))
res <- SpatialPoints(cbind(pts.max[[x]], pts.max[[y]]))
proj4string(res) <- proj4string(pts)
return(res)
}
dev.off()
plot(r)
plot(sps, add=T)
sps$attr <- extract(r, sps)
dev.off()
spplot(sps, "attr")
x <- filterPoints(sps, 150, attr)
library(dplyr)
x <- filterPoints(sps, 150, attr)
dev.off()
plot(x)
x <- filterPoints(sps, 150000, attr)
plot(x)
proj4string(sps)
dev.off()
r <- raster("~/GIS/sam_test.tif")
plot(r)
sps <- spsample(r, 1000, "regular")
sps <- spsample(as(extent(r), "SpatialPolygons"), 1000, "regular")
plot(sps, add=T)
sps$attr <- extract(r, sps)
proj4string(sps) <- proj4string(r)
x <- filterPoints(sps, 150, attr)
plot(r)
plot(x, add=T)
plot(r)
x <- filterPoints(sps, 500, attr)
plot(x, add=T)
s
x
x$attr <- extract(x, r)
x$attr <- extract(r, x)
x <- filterPoints(x, 500, attr)
plot(x, add=T, color="blue")
plot(r)
plot(x, add=T, color="blue")
x <- filterPoints(x, 500, attr)
x$attr <- extract(r, x)
dev.off()
x <- filterPoints(x, 500, attr)
plot(r)
plot(x, add=T)
source("dispeRse.R")
a
r
b <- r
b[values(b) > 0] <- 1
plot(b)
orig <- c(-60,-10)
simulateDispersal(b, orig, 5000, 1.3)
b[!is.na(values(b))] <- 0
b[!is.na(values(b))] <- 1
plot(b)
simulateDispersal(b, orig, 5000, 1.3)
source("dispeRse.R")
iso <- simulateDispersal(b, orig, 5000, 1.3)
plot(iso, col=viridis(10))
library(viridisLite)
plot(iso, col=viridis(10))
source("dispeRse.R")
iso <- simulateDispersal(b, orig, 5000, 1.3)
plot(iso, col=viridis(10))
plot(iso, col=viridis(20))
vt <- raster("~/veg_test.tif")
plot(vt)
vt[values(vt) > 1] <- 10
plot(vt)
vt
plot(orig, add=T)
iso <- simulateDispersal(vt, orig, 5000, 1.3)
warnings()
plot(iso)
iso[values(iso)<=0] <- 0
plot(iso)
plot(iso, col=viridis(10))
source("dispeRse.R")
iso <- simulateDispersal(vt, orig, 5000, 1.3)
plot(iso)
source("dispeRse.R")
plot(iso)
iso <- simulateDispersal(vt, orig, 5000, 1.3)
plot(iso)
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso)
vt <- raster("~/veg_test.tif")
vt[values(vt) > 1] <- 20
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso)
plot(iso, col=viridis(5))
plot(iso, col=viridis(25))
plot(iso, col=viridis(20))
vt[values(vt) > 1] <- 5
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso, col=viridis(20))
plot(iso, col=viridis(30))
plot(iso, col=viridis(10))
vt[values(vt) > 1] <- 33
iso <- simulateDispersal(vt, orig, 5000, 1.78)
plot(iso, col=viridis(10))
x <- 1:100
y <- 2*x + 5
plot(x,y)
dev.off()
y <- 2*x^2 -5x + 1
y <- 2*x^2 -5*x + 1
plot(x,y)
y <- x^3 - 4*x^2 + x + 8
plot(x,y)
y <- 7*x^3 - 4*x^2 + x + 8
plot(x,y)
y <- 7*x^3 - 4*x^2 + 5*x + 8
plot(x,y)
y <- 7*x^3 - 12*x^2 + 5*x + 8
plot(x,y)
y <- x^3 - x^2 + x + 8
plot(x,y)
y <- -5*x^3 - x^2 + x + 8
plot(x,y)
y <- -5*x^3 + x^2 + x + 8
plot(x,y)
y <- -5*x^3 + 16*x^2 + x + 8
plot(x,y)
y <- -5*x^2 +x + 8
plot(x,y)
y <- -5*x^2 +16*x + 8
plot(x,y)
foo <- function(x) {
if (x < 50) {return (2*x + 7 + rnorm(1) * 10)}
else {return (1.5 * x + 14 + rnorm(1) * 10)}
}
y <- foo(x)
y <- numeric()
for (i in x) {y[i] <- foo(i)}
plot(x,y)
foo <- function(x) {
if (x < 50) {return (3*x + 5 + rnorm(1) * 10)}
else {return (1.5 * x + 14 + rnorm(1) * 10)}
}
for (i in x) {y[i] <- foo(i)}
plot(x,y)
m <- lm(y~x)
ablines(m)
abline(m)
m <- lm(y~poly(x))
abline(m,col="red")
m <- lm(y~poly(x,3))
abline(m,col="red")
m
pred <- predict(m, data.frame(x=x))
lines(x,pred)
m
summary(m)
m2 <- lm(y~x)
summary(m2)
m3 <- lm(y~poly(x,2))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3)
plot(x,pred)
plot(x,y)
foo <- function(x) {
if (x < 50) {return (x + 5 + rnorm(1) * 10)}
else {return (3 * x + 14 + rnorm(1) * 10)}
}
for (i in x) {y[i] <- foo(i)}
plot(x,y)
m3 <- lm(y~poly(x,2))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3)
m3 <- lm(y~poly(x,3))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=4)
m3 <- lm(y~poly(x,4))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=5)
foo <- function(x) {
if (x < 40) {return (x + 5 + rnorm(1) * 10)}
else if (x < 60) {
if (runif(1) < 0.5) {return (x + 5 + rnorm(1) * 10)} else {return (3 * x + 14 + rnorm(1) * 10)}
} else {
return (3 * x + 14 + rnorm(1) * 10)}
}
for (i in x) {y[i] <- foo(i)}
plot(x,y)
m3 <- lm(y~poly(x,2))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3)
m3 <- lm(y~poly(x,3))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=3)
plot(x,y)
lines(x,pred3,col=4)
m3 <- lm(y~poly(x,4))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=4)
m3 <- lm(y~poly(x,5))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=4)
lines(x,pred3,col=7)
plot(x,y)
m3 <- lm(y~poly(x))
pred3 <- predict(m3, data.frame(x=x))
m3
m3 <- lm(y~poly(x,6))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=7)
plot(x,y)
m3 <- lm(y~log(x))
pred3 <- predict(m3, data.frame(x=x))
lines(x,pred3,col=7)
plot(x,y)
m3 <- lm(y~x)
abline(m3, col=4)
ml <- glm(y~x, family="logit")
ml <- glm(y~x, family="binomial")
ml <- glm(y~x, family=logit)
ml <- glm(y~x, family=logit())
ml <- glm(y~x, family=binomial)
ml <- glm(y~x, family=binomial, link="logit")
ml <- glm(y~x, family=binomial(link="logit"))
n <- nls()
n <- nls(y~x)
n <- nls("y~x")
n <- nls(y~x)
n <- nls(formula=y~x)
ml <- glm(y~x, family=binomial(link="logit"))
ml <- glm(y~x, family=quasibinomial(link="logit"))
plot(x,y)
ml <- glm(y~x, family=quasibinomial
)
ml <- glm(y~x, family=quasibinomial())
y2 <- y / max(y)
plot(x,y2)
ml <- glm(y~x, family=quasibinomial())
ml <- glm(y2~x, family=quasibinomial())
predl <- predict(ml, data.frame(x=x))
lines(x,predl)
abline(ml)
plot(x,predl)
ml <- glm(y2~x, family=binomial(link="logit"))
ml <- glm(y2~x, family=binomial())
predl <- predict(ml, data.frame(x=x))
plot(x,predl)
?predict
plot(x,y)
ms <- spline(x,y)
ms
plot(x,ms$y)
plot(ms$x,ms$y)
plot(ms$x,ms$y,type="l")
spline(x,y,n=8)
plot(ms$x,ms$y,type="l")
ms <- spline(x,y,n=100)
plot(ms$x,ms$y,type="l")
ms <- spline(x,y,n=10)
plot(ms$x,ms$y,type="l")
m <- lm(y~poly(x,3))
plot(x,y)
abline(m)
plot(x,y)
pred <- predict(m, data.frame(x=x))
lines(pred, col="red")
fit = glm(y2~x, family=binomial)
predl <- predict(fit, data.frame(x=x), type="response")
lines(x, predl)
fit = glm(y2~x, family=binomial)
plot(x,y2)
predicted= predict(fit, newdata=data.frame(x=x), type="response")
predicted
plot(x,y2)
lines(x,predicted,col="red")
?glm
plot(x,y2)
lines(x,predicted,col="red")
plot(x,predicted,type="l")
lam = 0.5
exp(-lam)
exp(-lam*2)
x <- seq(500,5000,4000)
x
x <- seq(0,1,length=4500)
x
lam*e(-lam*x)
lam*exp(-lam*x)
y <- lam*exp(-lam*x)
plot(x,y)
plot(x,y, ylim=c(0,1))
x <- seq(0,5,4500)
y <- lam*exp(-lam*x)
plot(x,y, ylim=c(0,1))
x
x <- seq(0,5,length=4500)
x
y <- lam*exp(-lam*x)
y
plot(x,y, ylim=c(0,1))
plot(x,y, ylim=c(0,1), type="l")
min(y)
x*5000
length(x)
y
sample(y)
sample(x, prob=y)
sample(x, 1, prob=y)
sample(x, 1, prob=y)
sample(x, 1, prob=y)
sample(x, 1, prob=y)
sample(x, 1, prob=y)
hist(sample(x, 100, prob=y))
x1 <- seq(500,5000)
length(x1)
x1 <- seq(499,5000)
length(x1)
x1 <- seq(501,5000)
length(x1)
hist(sample(x1, 100, prob=y))
y[1]
y[0]
y[2]
install.packages("spgwar")
install.packages("spgwr")
library(raster)
a <- read.csv("~/Documents/south_sites_2.csv")
coords(a) <- ~X+Y
coordinates(a) <- ~X+Y
a
head(a)
coordinates(a) <- ~x1+y1
plot(a)
d <- distanceFromPoints(a)
d <- distanceFromPoints(xy=a)
r <- raster(extent(a))
res(r) <- 0.25
d <- distanceFromPoints(r, a)
plot(a)
plot(d)
d
a[0]
plot(a[0], add=T)
plot(d)
plot(a[1], add=T)
a[[1]]
a[1]
a[1,]
plot(d)
a[1,]
plot(a[1,], add=T)
or <- a[1,]
source("~/disperse/disperse.R")
x <- dispersal(or, 5000, 1, extent(a))
plot(x)
source("~/disperse/disperse.R")
x <- dispersal(or, 5000, 1, extent(a))
plot(x)
gc()
x <- 500:1000
exp(x)
exp(-x)
plot(exp(-x))
plot(exp(-(1:5)))
plot(exp(-(1:5)), type="l")
rexp(10)
plot(rexp(10))
hist(rexp(10))
hist(rexp(10000))
hist(rexp(10000000))
hist(rexp(1000))
hist(rexp(1000),2)
hist(rexp(1000),0.5)
hist(rexp(1000,2))
hist(rexp(1000,5))
hist(rexp(1000,0.5))
hist(rexp(1000,0.1))
hist(rexp(1000,0.0.1))
hist(rexp(1000,0.01))
hist(rexp(1000,1))
rexp(1,1)
(5000-2000) / 5
2.32 * 600
hist(rexp(1000,1))
hist(rexp(10000,1))
rexp(10000,1) > 5
sum(rexp(10000,1) > 5)
1 - exp(-2)
1 - exp(-3)
1 - exp(-4)
1 - exp(-5)
setwd("SouthAsiaNeo/R
")
setwd("SouthAsiaNeo")
source("R/bio.R")
res <- GA(numGenes, 100, 50, 5, mutationRate, 10)
res
