for (i in 1:10000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
mean(c(94536, 94584, 94455, 94602))
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
res <- c()
for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)}
sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591))
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664,94583))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664,94583,94511))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664,94583,94511,94469))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664,94583,94511,94469,94499))
res <- c();for (i in 1:100000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
mean(c(94536, 94584, 94455, 94602, 94380, 94591,94664,94583,94511,94469,94499,94525))
res <- c();for (i in 1:1000000) {x <- runif(1,3,8); y <- runif(1,0,x); res[i] <- min(x,y)};sum(res <= 6)
i <- 1
foo <- function() {i <- 1; n <- runif(1); while(n > 1/3) {i <- i+1}; return(i)}
foo()
foo <- function() {i <- 1; n <- runif(1); while(n > 1/3) {i <- i+1; n <- runif(1)}; return(i)}
foo()
res <- c()
for (i in 1:1000) {res[i] <- foo()}
res
mean(res)
res <- c()
for (i in 1:1000) {res[i] <- foo()}
mean(res)
res <- c()
for (i in 1:1000) {res[i] <- foo()}
mean(res)
foo1 <- function() {i <- 1; n <- runif(1); while(n > 1/3) {i <- i+1; n <- runif(1)}; return(i+3)}
foo2 <- function() {i <- 1; n <- runif(1); while(n > 1/3) {i <- i+1; n <- runif(1)}; return(i+2)}
res <- c()
for (i in 1:100000) {res[i] <- foo1()}; mean(res)
res <- c()
for (i in 1:100000) {res[i] <- foo1()}; mean(res)
res <- c()
for (i in 1:100000) {res[i] <- foo1()}; mean(res)
res <- c()
for (i in 1:1000000) {res[i] <- foo1()}; mean(res)
res <- c()
for (i in 1:1000000) {res[i] <- foo2()}; mean(res)
rpois(1,2)
hist(rpois(1000,2))
hist(rpois(100000,2))
density(rpois(100000,2))
plot(density(rpois(100000,2)))
res <- c()
res <- rpois(1000000,2)
res
res <= 2
sum(res <= 2)
sum(rpois(100,2) <= 2)
sum(rpois(100,1) <= 2)
sum(rpois(100,1) <= 1)
sum(rpois(100,2) <= 2) + sum(rpois(100,1) < 1)
sum(rpois(1000,2) <= 2) + sum(rpois(1000,1) < 1)
sum(rpois(1000000,2) <= 2) + sum(rpois(1000000,1) < 1)
sum(rpois(1000000,2) < 2) + sum(rpois(1000000,1) < 1)
rpois(100,2)
mean(rpois(100,2))
rexp(1,.1)
hist(rexp(1000,.1))
num_maga <- rpois(1,2)
num_maga
num_maga <- rpois(1,2)
num_maga
foo <- function() {
num_maga <- rpois(1,2)
for (i in 1:num_maga) {
foo <- function() {
num_maga <- rpois(1,2)
mins <- 0
for (i in 1:num_maga) {
mins <- mins + rexp(1, .1)
}
return(mins)}
foo()
x <- 0
for (i in 1:30) {x <- x + foo()}
x
x <- 0
for (i in 1:30) {x <- x + foo()}
x <- 0
for (i in 1:30) {x <- x + foo()}
x
x <- 0
for (i in 1:30) {x <- x + foo()}
x
for (i in 1:1000) {}
for (i in 1:1000) {
z <- c()
for (i in 1:1000) {
x <- 0
for (j in 1:30) {x<-x+foo()}
z[i] <- x
}
z
mean(z)
var(z)
z <- c()
foo <- function() {}
foo <- function() {
nMag <- rpois(1,2)
nMin <- 0
for (i in 1:nMag) {
mins <- rexp(1, .1)
nMin <- nMin + mins
} return (nMin) }
foo <- function() {
nMag <- rpois(1,2)
nMin <- nMin + mins
foo <- function() {
nMin <- 0
nMag <- rpois(1,2)
for (i in 1:nMag) {nMin <- nMin + rexp(1,.1)}
return(nMin)
}
foo()
bar <- function() {
tot <- 0
for (i in 1:30) {tot <- tot + foo()}
}
bar()
bar <- function() {
tot <- 0
for (i in 1:30) {tot <- tot + foo()}
return(tot) }
bar()
res <- c(); for (i in 1:1000) {res[i] <- bar()}; mean(res)
res <- c(); for (i in 1:10000) {res[i] <- bar()}; mean(res)
res <- c(); for (i in 1:100000) {res[i] <- bar()}; mean(res)
gc()
res <- c(); for (i in 1:100000) {res[i] <- bar()}; mean(res)
gc()
res <- c(); for (i in 1:100000) {res[i] <- bar()}; mean(res)
hist(rpois(100,2))
hist(rpois(1000,2))
res <- c(); for (i in 1:100000) {res[i] <- bar()}; mean(res)
1/(.1^2)
1/.1
rpois(360,2)
sum(rpois(360,2))
hist(rpois(1000000,2))
hist(rpois(1000000,10))
sum(rpois(1000000,10))
sum(rpois(360,10))
z <- c()
for (i in 1:1000000) {
z[i] <- sum(rpois(360,10))}
sum(z >= 3500 & z <= 3600)
3500/360
(10^10 * exp(-10)) / factorial(10)
foo <- function(k,lambda) {
return( (lambda^k * exp(-lambda)) / factorial(k) ) }
foo(1,1)
foo(10,10)
foo(5,2)
foo(0,2)
foo(0,1)
a <- foo(5,2) * foo(0,1)
a
b <- foo(4,2) * foo(1,1)
c <- foo(3,2) * foo(2,1)
d <- foo(2,2) * foo(3,1)
a+b+c+d
d
e <- foo(1,2) * foo(4,1)
f <- foo(0,2) * foo(5,1)
a+b+c+d+e+f
foo(2,2) * foo(3,1)
foo(2,2)
(0.2706706 * 0.01659569) / 0.1008188
d/0.1008188
76*2
76*3
setwd("south-asia-neo/")
suppressPackageStartupMessages({#
    library(gdistance)#
    #library(rcarbon)#
    library(rgdal)#
    library(parallel)#
    library(viridis)#
    library(RColorBrewer)#
    library(pals)#
    library(rasterVis)#
})
set.seed(100)#
#
ORIGIN <- c(42.45, 36.37)#
START <- 11748#
DATES <- read.csv("sites/dates100.csv")#
coordinates(DATES) <- ~Longitude+Latitude#
proj4string(DATES) <- CRS("+init=epsg:4326")#
#
#coast <- ne_download(scale=10, type="coastline", category="physical")#
coast <- readOGR("layers/ocean.shp")#
#
#cal <- calibrate(DATES$C14, DATES$SD, verbose=FALSE)#
#DATES$bp <- medCal(cal)#
#
BIOMES <- raster("layers/newBiomes2.tif")#
normRaster <- function(x) {#
    return ((x - min(values(x), na.rm=TRUE)) / (max(values(x), na.rm=TRUE) - min(values(x), na.rm=TRUE)))#
}#
simulateDispersal <- function(costRaster, origin, date) {#
    tr <- transition(costRaster, function(x) 1 / mean(x), 16)#
    tr <- geoCorrection(tr)#
    ac <- accCost(tr, origin)#
    ac <- ac / 1000#
    ac[values(ac) == Inf] <- NA#
    simDates <- date - ac#
    return(simDates)#
}#
compareDates <- function(simRaster, dates) {#
    dates$simbp <- extract(simRaster, dates)#
    dates$dist <- spDistsN1(dates, ORIGIN, longlat=TRUE)#
#
    model <- lm(simbp~poly(dist, 2), data=dates)#
    x <- min(dates$dist, na.rm=T):max(dates$dist, na.rm=T)#
    y <- predict(model, newdata=data.frame(dist=x))#
#
    plot(dates$dist, dates$bp, xlab="Distance from origin (km)", ylab="Age (cal BP)", pch=20)#
    points(dates$dist, dates$simbp, col=4, pch=20)#
    lines(x, y, col=4)#
}#
testModel <- function(costRaster, sites=DATES, origin=ORIGIN, date=START) {#
    simDates <- simulateDispersal(costRaster, origin, date)#
    gc() #
    # Score#
    sites$simbp <- extract(simDates, sites)#
    sites <- sites[!is.na(sites$simbp),]#
    rmse <- sqrt(sum((sites$simbp - sites$bp)^2) / nrow(sites))#
    return(rmse)#
}#
reclassRaster <- function(r, vals) {#
    r.new <- r#
    codes <- 1:6#
    #codes <- c(1,4,8,10,13,100)#
    #codes <- c(1,4,8,10,13)#
    #codes <- c(1,4,9,13)#
    #codes <- c(1,2,4,5,6,9,11,12,13,18,19,21)#
    for (i in 1:length(codes)) {#
        r.new[values(r) == codes[i]] <- vals[i]#
    }#
    return (r.new)#
}#
# Genetic Algorithm#
#
crossover <- function(x, y) {#
    i <- sample(1:(length(x)-1), 1)#
    return(c(x[1:i], y[(i+1):length(y)]))#
}#
#
mutate <- function(x) {#
    i <- sample(1:length(x), 1)#
    x[i] <- x[i] + rnorm(1)#
    return(x)#
}#
#
GA <- function(numGenes, numGenomes, numParents, numElite, mutationRate, numIter, cores=NULL) {#
    # Initialize genomes#
    genomes <- as.data.frame(matrix(nrow=numGenomes, ncol=numGenes+1))#
    for (i in 1:numGenomes) {#
        genomes[i,] <- c(rnorm(numGenes, mean=1), Inf)#
    }#
#
    maxScores <- c()#
    avgScores <- c()#
#
    if (is.null(cores)) {#
        ncores <- detectCores() - 1#
    } else {#
        ncores <- cores#
    }#
#
    cl <- makeCluster(ncores)#
    clusterEvalQ(cl, library("gdistance"))#
    clusterExport(cl, varlist=c("BIOMES", "ORIGIN", "START", "DATES", "reclassRaster",#
                                "testModel", "simulateDispersal"),#
                                envir=environment())#
#
    cat(paste("\nRunning genetic algorithm on", ncores,#
            "parallel workers.\nThis may take a while...\n"))#
    #pb <- txtProgressBar(min=0, max=numIter, style=3)#
    #setTxtProgressBar(pb, 0)#
    for (iter in 1:numIter) {#
        genomeList <- split(genomes, seq(nrow(genomes)))#
#
        res <- parLapply(cl, genomeList, function(x) {#
            if (x[1,numGenes+1] != Inf) {#
                return (x[1,numGenes+1])#
            } else {#
                if (min(x[1,1:numGenes]) <= 0) {#
                    return(Inf)#
                } else {#
                    cost <- reclassRaster(BIOMES, as.numeric(x[1,1:numGenes]))#
                    score <- testModel(cost)#
                    gc()#
                    return(score)#
                }#
            }#
        })#
#
        genomes[,numGenes+1] <- unlist(res)#
#
        avgScores[iter] <- mean(genomes[,numGenes+1][!is.infinite(genomes[,numGenes+1])])#
#
        elite <- genomes[order(genomes[,numGenes+1]),][1:numElite,]#
        parents <- genomes[order(genomes[,numGenes+1]),][1:numParents,]#
        parents <- parents[order(as.numeric(rownames(parents))),]#
#
        maxScores[iter] <- elite[1,numGenes+1]#
#
        children <- as.data.frame(matrix(nrow=numGenomes - numElite, ncol=numGenes+1))#
        j <- 1#
        while (j <= numGenomes - numElite) {#
            for (i in seq(1, numParents - 1, 2)) {#
                if (j > numGenomes - numElite) {#
                    break#
                }#
                parent1 <- as.numeric(parents[i,])[1:numGenes]#
                parent2 <- as.numeric(parents[i+1,])[1:numGenes]#
                child <- crossover(parent1, parent2)#
                if (runif(1) < mutationRate) {#
                    child <- mutate(child)#
                }#
                children[j,] <- c(child, Inf)#
                j <- j+1#
            }#
        }#
        genomes <- rbind(elite, children)#
        rownames(genomes) <- sample(1:numGenomes)#
        #setTxtProgressBar(pb, iter)#
        cat("\r", floor(iter / numIter * 100), "%\tAvg score:", avgScores[iter])#
    }#
    cat("\n")#
    #close(pb)#
#
    stopCluster(cl)#
#
    return (list(genomes=genomes, maxScores=maxScores, avgScores=avgScores))#
}#
plotMap <- function(r) {#
    ext <- extent(r)#
    plot(r, xlim=c(ext[1], ext[2]), ylim=c(ext[3], ext[4]), col=viridis_pal()(255),#
         main="Simulated arrival times", xlab="Longitude", ylab="Latitude",#
         legend.args=list(text="Age (yr BP)", side=2, font=1))#
    minDate <- floor(min(values(r), na.rm=T) / 1000) * 1000#
    contour(r, add=T, levels=seq(minDate, max(values(r), na.rm=T), 1000), col="white", lwd=1)#
    plot(coast, add=T, lwd=1, col="lightgrey")#
}#
plotSpeed <- function(r) {#
    ext <- extent(r)#
    plot(r, xlim=c(ext[1], ext[2]), ylim=c(ext[3], ext[4]), col=viridis_pal()(255),#
         main="Simulated speed (km/yr)", xlab="Long", ylab="Lat")#
    #contour(r, add=T, levels=seq(0, max(values(r), na.rm=T), 0.1))#
    plot(coast, add=T, lwd=1.5)#
}#
numGenes <- 6#
#
numGenomes <- 200#
numParents <- 100#
numElite <- 20#
mutationRate <- 0.1#
numIter <- 20
load("ga0908.RData")
best <- as.numeric(res$genomes[1,])#
costRaster <- reclassRaster(BIOMES, best[1:numGenes])#
simDates <- simulateDispersal(costRaster, ORIGIN, START)#
simDates <- crop(simDates, extent(DATES))
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=cubicl,#
              main=list("Simulated arrival times", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.lines(ctr, lwd=0.5))#
    return(p)#
}
plotMap2(simDates)
a <- compareDates(simDates, DATES)
a
plot(ctr)
library(maptools)
lineLabel(ctr)
sp.lineLabel(ct)
sp.lineLabel(ctr)
sp.lineLabel(ctr, ctr@data$level)
plot(ct)
plot(ctr)
sp.lineLabel(ctr)
plot(ctr)
sp.lineLabel(ctr, c("1000"))
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.lines(ctr, lwd=0.5))#
    return(p)#
}
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.lines(ctr, lwd=0.5, col="white"))#
    return(p)#
}
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
}
plotMap2(simDates)
levelplot(simDates, margin=F, colorkey=list(at=seq(4000,10000,2000)))
levelplot(simDates, margin=F, at=seq(2000,11000,100))
levelplot(simDates, margin=F, at=seq(2000,11000,100), contour=T)
contourplot(simDates)
levelplot(simDates, margin=F, at=seq(2000,11000,100), contour=T)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
}
plotMap2(simDates)
levelplot(simDates, margin=F, at=seq(2000,11000,100))
levelplot(simDates, margin=F, at=seq(2000,11000,100)) + contourplot(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         contourplot(x, at=seq(minDate, maxDate, 1000))#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
}
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5, labels=list(cex=0.6), label.style="align")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
}
plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5,#
                     labels=list(cex=0.6), label.style="align",#
                     col="white")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
};plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5,#
                     labels=list(cex=0.5, col="white"), col="white")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
};plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.points(DATES)) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5,#
                     labels=list(cex=0.5, col="white"), col="white")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
};plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.points(DATES, col="white", cex=0.2)) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5,#
                     labels=list(cex=0.5, col="white"), col="white")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
};plotMap2(simDates)
plotMap2 <- function(x) {#
    minDate <- floor(min(values(x), na.rm=T) / 1000) * 1000#
    maxDate <- floor(max(values(x), na.rm=T) / 1000) * 1000#
    ctr <<- rasterToContour(x, levels=seq(minDate, maxDate, 1000))#
    p <- levelplot(x, margin=F, cuts=255, col.regions=parula,#
              main=list("Simulated arrival times (yr BP)", cex=0.8)) +#
         layer(sp.polygons(coast, fill="lightgrey")) +#
         layer(sp.points(DATES, col="white", cex=0.3)) +#
         contourplot(x, at=seq(minDate, maxDate, 1000), lwd=0.5,#
                     labels=list(cex=0.5, col="white"), col="white")#
         #layer(sp.lines(ctr, lwd=0.75, col="white"))#
    return(p)#
};plotMap2(simDates)
dev.print(jpeg, "simDates.jpg", width=1200, res=300)
dev.print(jpeg, "simDates.jpg", width=2800, res=300)
dev.print(jpeg, "simDates.jpg", width=2000, res=300)
dev.print(jpeg, "simDates.jpg", height=1000, res=300)
dev.print(jpeg, "simDates.jpg", width=1200, res=300)
dev.print(jpeg, "simDates.jpg", width=1600, res=300)
